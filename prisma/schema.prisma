// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// ===== ENUMS =====
enum GraduatingClass {
    CO2029
    CO2028
    CO2027
    CO2026
    CO2025
    MASTERS
}

enum ProjectType {
    MOBILE_APP
    DESKTOP_APP
    APPLET
    GAME
    WEB_APP
    WEBSITE
    OPEN_SOURCE_CONTRIBUTION
    HARDWARE
    OTHER
}

enum InviteStatus {
    PENDING
    ACCEPTED
    DECLINED
}

// ===== CORE MODELS =====
model User {
    id            String    @id @default(cuid())
    name          String?
    preferredName String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    
    // Participant-specific fields
    graduatingClass GraduatingClass?
    attended        Boolean          @default(false)
    teamId          String?
    hasVisitedParticipantPage Boolean @default(false)
    
    // Relations
    accounts      Account[]
    sessions      Session[]
    team          Team?              @relation(fields: [teamId], references: [id])
    sentInvites   Invite[]          @relation("InviteSender")
    receivedInvites Invite[]        @relation("InviteReceiver")
}

model AdminEmail {
    email String @id @unique
    
    @@map("admin_emails")
}

model Team {
    id          String        @id @default(uuid())
    name        String        @unique
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    
    // Relations
    members   User[]
    project   Project?
    invites   Invite[]
}


model Invite {
    id                   String       @id @default(uuid())
    fromUserId           String
    toUserId             String
    teamId               String
    status               InviteStatus @default(PENDING)
    message              String?
    createdAt            DateTime     @default(now())
    
    // Relations
    fromUser User  @relation("InviteSender", fields: [fromUserId], references: [id], onDelete: Cascade)
    toUser   User  @relation("InviteReceiver", fields: [toUserId], references: [id], onDelete: Cascade)
    team     Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
    
    @@unique([toUserId, teamId])
}

model Project {
    id          String       @id @default(uuid())
    name        String
    description String?
    type        ProjectType
    link        String?
    notes       String?
    teamId      String       @unique
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    
    // Relations
    team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
}


// ===== NEXT AUTH MODELS =====
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}